package scalaxb.compiler.xsd2

import scala.xml.Node
import scalaxb.compiler.{Config, Snippet}
import xmlschema._
import Defs._

case class ProtocolGenerator(config: Config) {
  import com.weiglewilczek.slf4s.Logger
  lazy val logger = Logger("xsd2.GenProtocol")

  def generateProtocol(snippet: Snippet): Seq[Node] = {
    val name = "XMLProtocol" // makeTypeName("XMLProtocol")
    val packageString = config.protocolPackageName map { "package " + _ + NL } getOrElse{""}
    val packageValueString = config.protocolPackageName map { x => x } getOrElse {""}
    val scopeString = """None -> "example""""
      // if (scopes.isEmpty) "Nil: _*"
      // else scopes.map(x => quote(x._1) + " -> " + quote(x._2)).mkString("," + NL + indent(2))

    <source>// Generated by &lt;a href="http://scalaxb.org/"&gt;scalaxb&lt;/a&gt;.
{packageString}
/**
usage:
val obj = scalaxb.fromXML[{packageValueString}.Foo](node)
val document = scalaxb.toXML[{packageValueString}.Foo](obj, "foo", {packageValueString}.defaultScope)
**/
object `package` extends { buildDefaultProtocolName(name) } {{ }}

trait { buildDefaultProtocolName(name) } extends scalaxb.XMLStandardTypes {{
  val defaultScope = scalaxb.toScope({scopeString})
{snippet.implicitValue}
{snippet.defaultFormats}
}}</source>
  }

  def buildDefaultProtocolName(name: String): String =
    config.classPrefix map { p => p + name.drop(p.length) } getOrElse {name}
}
package scalaxb.compiler.xsd2

import scala.xml.Node
import scalaxb.compiler.{Config, Snippet, Log}
import xmlschema._
import Defs._
import java.net.URI

case class ProtocolGenerator(schema: ReferenceSchema, 
  context: SchemaContext, config: Config) extends Lookup with Namer with Splitter with Symbols {
  import treehugger.forest._
  import definitions._
  import treehuggerDSL._

  private val logger = Log.forName("xsd2.GenProtocol")

  def generateProtocol(snippet: Snippet): Seq[Node] = {
    val name = "XMLProtocol" // makeTypeName("XMLProtocol")
    val scopeSchemas = context.schemas    
    def makePrefix(namespace: Option[URI]): String =
      namespace map { ns =>
        if (ns == XML_URI) XML_PREFIX
        else context.prefixes.getOrElse(ns, "")
      } getOrElse {""}
    def makeScope(x: ReferenceSchema): Option[(Option[String], String)] =
      x.targetNamespace match {
        case Some(ns) =>
          val prefix = makePrefix(x.targetNamespace)
          if (prefix == "") Some(Some("tns") -> ns.toString)
          else Some(Some(prefix) -> ns.toString)
        case _ => None
      }
    def makeDistinct(list: List[(Option[String], String)], counter: Int): List[(Option[String], String)] = {
      def sortOption(a: (Option[String], String), b: (Option[String], String)) = {
        (a._1, b._1) match {
          case (None, _) => true
          case (_, None) => false
          case (a, b) => a.get < b.get
        }
      }

      val sortedList = list.sortWith((a, b) => sortOption(a, b))
      sortedList match {
        case x :: l if x._1.isEmpty => { x :: makeDistinct(l, counter) }
        case x :: l if !l.isEmpty && x._1.get == l.head._1.get => { (x._1.map(_ + counter.toString), x._2) :: makeDistinct(l, counter + 1) }
        case x :: l => { x :: makeDistinct(l, counter) }
        case _ => Nil
      }
    }

    logger.debug("generateProtocol: defaultNamespace: " + config.defaultNamespace)
    logger.debug("generateProtocol: " + (scopeSchemas map {_.unbound.elementFormDefault}))
    // including XS_URL into the default scope prints out the xsi:type, which is necessary for anyType round trip.
    val scopes = makeDistinct((
      (config.defaultNamespace match {
        case Some(ns) if scopeSchemas.toList forall {_.unbound.elementFormDefault == XQualified} => List(None -> ns)
        case _ => Nil }) :::
      (scopeSchemas.toList flatMap {makeScope _}) :::
      List((Some(XSI_PREFIX) -> XSI_URL.toString), (Some(XS_PREFIX) -> XML_SCHEMA_URI.toString))).distinct, 0)

    val packageString = config.protocolPackageName map { "package " + _ + NL } getOrElse{""}
    val packageValueString = config.protocolPackageName map { x => x } getOrElse {""}
    val scopeTree: Tree =
      Scalaxb_toScope APPLY (
        if (scopes.isEmpty) SEQARG(NIL) :: Nil
        else scopes map { x => optionTree(x._1) ANY_-> LIT(x._2) }
      )
    def scopeString: String = treeToString(scopeTree)

    <source>// Generated by &lt;a href="http://scalaxb.org/"&gt;scalaxb&lt;/a&gt;.
{packageString}
/**
usage:
val obj = scalaxb.fromXML[{packageValueString}.Foo](node)
val document = scalaxb.toXML[{packageValueString}.Foo](obj, "foo", {packageValueString}.defaultScope)
**/
object `package` extends { buildDefaultProtocolName(name) } {{ }}

trait { buildDefaultProtocolName(name) } extends scalaxb.XMLStandardTypes {{
  val defaultScope = {scopeString}
{snippet.implicitValue}
{snippet.defaultFormats}
}}</source>
  }

  def buildDefaultProtocolName(name: String): String =
    config.classPrefix map { p => p + name.drop(p.length) } getOrElse {name}
}
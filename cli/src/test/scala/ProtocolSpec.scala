import org.specs2._

object ProtocolSpec extends Specification { def is =
  "this is a specification to check the generated protocol source"            ^
                                                                              p^
  "the generated protocol source should"                                      ^
    "start with // Generated by"                                              ! protocol1^
                                                                              end^
  "top-level complex types should"                                            ^
    "generate a format typeclass instance"                                    ! complexType1^
                                                                              end

  lazy val module = new scalaxb.compiler.xsd2.Driver
  lazy val emptyProtocolSource = module.processNode(<xs:schema targetNamespace="http://www.example.com/"
    xmlns:xs="http://www.w3.org/2001/XMLSchema" />, "example")(1)

  def protocol1 = {
    println(emptyProtocolSource)
    emptyProtocolSource must startWith("// Generated by")
  }

  lazy val addressProtocolSource = module.processNode(<xs:schema targetNamespace="http://www.example.com/general"
      xmlns:xs="http://www.w3.org/2001/XMLSchema"
      xmlns:gen="http://www.example.com/general">
    <xs:complexType name="Address">
      <xs:sequence>
        <xs:element name="street" type="xs:string"/>
        <xs:element name="city" type="xs:string"/>
      </xs:sequence>
    </xs:complexType>
  </xs:schema>, "example")(1)

  def complexType1 = {
    println(addressProtocolSource)
    (addressProtocolSource must contain(
      """implicit lazy val ExampleAddressFormat: scalaxb.XMLFormat[example.Address] = new DefaultExampleAddressFormat {}""")) and
    (addressProtocolSource must contain(
      """trait DefaultExampleAddressFormat extends scalaxb.ElemNameParser[example.Address] {"""))
  }
}

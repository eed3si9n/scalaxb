// Generated by <a href="http://scalaxb.org/">scalaxb</a>.
package wsdl11

import masked.scalaxb

/**
usage:
val obj = scalaxb.fromXML[wsdl11.Foo](node)
val document = scalaxb.toXML[wsdl11.Foo](obj, "foo", wsdl11.defaultScope)
**/
object XXMLProtocol extends XXMLProtocol

trait XXMLProtocol extends scalaxb.XMLStandardTypes {
  val defaultScope = scalaxb.toScope(None -> "http://schemas.xmlsoap.org/wsdl/",
    Some("wsdl") -> "http://schemas.xmlsoap.org/wsdl/",
    Some("xs") -> "http://www.w3.org/2001/XMLSchema",
    Some("xsi") -> "http://www.w3.org/2001/XMLSchema-instance")
  implicit lazy val Wsdl11XDocumentationFormat: scalaxb.XMLFormat[wsdl11.XDocumentation] = new DefaultWsdl11XDocumentationFormat {}
  implicit lazy val Wsdl11XDocumentedFormat: scalaxb.XMLFormat[wsdl11.XDocumented] = new DefaultWsdl11XDocumentedFormat {}
  implicit lazy val Wsdl11XOpenAttsFormat: scalaxb.XMLFormat[wsdl11.XOpenAtts] = new DefaultWsdl11XOpenAttsFormat {}
  implicit lazy val Wsdl11XDefinitionsTypeFormat: scalaxb.XMLFormat[wsdl11.XDefinitionsType] = new DefaultWsdl11XDefinitionsTypeFormat {}
  implicit lazy val Wsdl11XImportTypeFormat: scalaxb.XMLFormat[wsdl11.XImportType] = new DefaultWsdl11XImportTypeFormat {}
  implicit lazy val Wsdl11XTypesTypeFormat: scalaxb.XMLFormat[wsdl11.XTypesType] = new DefaultWsdl11XTypesTypeFormat {}
  implicit lazy val Wsdl11XMessageTypeFormat: scalaxb.XMLFormat[wsdl11.XMessageType] = new DefaultWsdl11XMessageTypeFormat {}
  implicit lazy val Wsdl11XPartTypeFormat: scalaxb.XMLFormat[wsdl11.XPartType] = new DefaultWsdl11XPartTypeFormat {}
  implicit lazy val Wsdl11XPortTypeTypeFormat: scalaxb.XMLFormat[wsdl11.XPortTypeType] = new DefaultWsdl11XPortTypeTypeFormat {}
  implicit lazy val Wsdl11XOperationTypeFormat: scalaxb.XMLFormat[wsdl11.XOperationType] = new DefaultWsdl11XOperationTypeFormat {}
  implicit lazy val Wsdl11XParamTypeFormat: scalaxb.XMLFormat[wsdl11.XParamType] = new DefaultWsdl11XParamTypeFormat {}
  implicit lazy val Wsdl11XFaultTypeFormat: scalaxb.XMLFormat[wsdl11.XFaultType] = new DefaultWsdl11XFaultTypeFormat {}
  implicit lazy val Wsdl11XStartWithExtensionsTypableFormat: scalaxb.XMLFormat[wsdl11.XStartWithExtensionsTypable] = new DefaultWsdl11XStartWithExtensionsTypableFormat {}
  implicit lazy val Wsdl11XStartWithExtensionsTypeFormat: scalaxb.XMLFormat[wsdl11.XStartWithExtensionsType] = new DefaultWsdl11XStartWithExtensionsTypeFormat {}
  implicit lazy val Wsdl11XBindingTypeFormat: scalaxb.XMLFormat[wsdl11.XBindingType] = new DefaultWsdl11XBindingTypeFormat {}
  implicit lazy val Wsdl11XFaultFormat: scalaxb.XMLFormat[wsdl11.XFault] = new DefaultWsdl11XFaultFormat {}
  implicit lazy val Wsdl11XBinding_operationTypeFormat: scalaxb.XMLFormat[wsdl11.XBinding_operationType] = new DefaultWsdl11XBinding_operationTypeFormat {}
  implicit lazy val Wsdl11XServiceTypeFormat: scalaxb.XMLFormat[wsdl11.XServiceType] = new DefaultWsdl11XServiceTypeFormat {}
  implicit lazy val Wsdl11XPortTypeFormat: scalaxb.XMLFormat[wsdl11.XPortType] = new DefaultWsdl11XPortTypeFormat {}
  implicit lazy val Wsdl11XNotificationoperationSequenceFormat: scalaxb.XMLFormat[wsdl11.XNotificationoperationSequence] = new DefaultWsdl11XNotificationoperationSequenceFormat {}
  implicit lazy val Wsdl11XSolicitresponseoperationSequenceFormat: scalaxb.XMLFormat[wsdl11.XSolicitresponseoperationSequence] = new DefaultWsdl11XSolicitresponseoperationSequenceFormat {}
  implicit lazy val Wsdl11XRequestresponseoperationSequenceFormat: scalaxb.XMLFormat[wsdl11.XRequestresponseoperationSequence] = new DefaultWsdl11XRequestresponseoperationSequenceFormat {}
  implicit lazy val Wsdl11XOnewayoperationSequenceFormat: scalaxb.XMLFormat[wsdl11.XOnewayoperationSequence] = new DefaultWsdl11XOnewayoperationSequenceFormat {}

  trait DefaultWsdl11XDocumentationFormat extends scalaxb.ElemNameParser[wsdl11.XDocumentation] {
    val targetNamespace: Option[String] = Some("http://schemas.xmlsoap.org/wsdl/")
    
    override def isMixed: Boolean = true

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdl11.XDocumentation] =
      phrase(optTextRecord ~ 
      rep((((any(_ => true) ^^ (scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack))) ~ 
      optTextRecord) ^^ 
      { case p1 ~ p2 => Seq.concat(Seq(p1), p2.toList) })) ~ 
      optTextRecord ^^
      { case p1 ~ p2 ~ p3 =>
      wsdl11.XDocumentation(Seq.concat(p1.toList,
        p2.flatten,
        p3.toList),
        scala.collection.immutable.ListMap((node match {
          case elem: scala.xml.Elem =>
            elem.attributes.toList flatMap {
              
              case scala.xml.UnprefixedAttribute(key, value, _) =>
                List(("@" + key, scalaxb.DataRecord(None, Some(key), value.text)))
              case scala.xml.PrefixedAttribute(pre, key, value, _) =>
                val ns = elem.scope.getURI(pre)
                List(("@{" + ns + "}" + key, scalaxb.DataRecord(Option[String](ns), Some(key), value.text)))
              case _ => Nil
            }
          case _ => Nil
        }): _*)) })
    
    override def writesAttribute(__obj: wsdl11.XDocumentation, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.attributes.toList map {
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: wsdl11.XDocumentation, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      __obj.mixed.toSeq flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) }

  }

  trait DefaultWsdl11XDocumentedFormat extends scalaxb.XMLFormat[wsdl11.XDocumented] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, wsdl11.XDocumented] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://schemas.xmlsoap.org/wsdl/"), Some("definitionsType")) => Right(scalaxb.fromXML[wsdl11.XDefinitionsType](node, stack))
          case (Some("http://schemas.xmlsoap.org/wsdl/"), Some("importType")) => Right(scalaxb.fromXML[wsdl11.XImportType](node, stack))
          case (Some("http://schemas.xmlsoap.org/wsdl/"), Some("typesType")) => Right(scalaxb.fromXML[wsdl11.XTypesType](node, stack))
          case (Some("http://schemas.xmlsoap.org/wsdl/"), Some("messageType")) => Right(scalaxb.fromXML[wsdl11.XMessageType](node, stack))
          case (Some("http://schemas.xmlsoap.org/wsdl/"), Some("portTypeType")) => Right(scalaxb.fromXML[wsdl11.XPortTypeType](node, stack))
          case (Some("http://schemas.xmlsoap.org/wsdl/"), Some("operationType")) => Right(scalaxb.fromXML[wsdl11.XOperationType](node, stack))
          case (Some("http://schemas.xmlsoap.org/wsdl/"), Some("paramType")) => Right(scalaxb.fromXML[wsdl11.XParamType](node, stack))
          case (Some("http://schemas.xmlsoap.org/wsdl/"), Some("faultType")) => Right(scalaxb.fromXML[wsdl11.XFaultType](node, stack))
          case (Some("http://schemas.xmlsoap.org/wsdl/"), Some("startWithExtensionsType")) => Right(scalaxb.fromXML[wsdl11.XStartWithExtensionsTypable](node, stack))
          case (Some("http://schemas.xmlsoap.org/wsdl/"), Some("bindingType")) => Right(scalaxb.fromXML[wsdl11.XBindingType](node, stack))
          case (Some("http://schemas.xmlsoap.org/wsdl/"), Some("binding_operationType")) => Right(scalaxb.fromXML[wsdl11.XBinding_operationType](node, stack))
          case (Some("http://schemas.xmlsoap.org/wsdl/"), Some("serviceType")) => Right(scalaxb.fromXML[wsdl11.XServiceType](node, stack))
          case (Some("http://schemas.xmlsoap.org/wsdl/"), Some("portType")) => Right(scalaxb.fromXML[wsdl11.XPortType](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: wsdl11.XDocumented, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: wsdl11.XDefinitionsType => scalaxb.toXML[wsdl11.XDefinitionsType](x, __namespace, __elementLabel, __scope, true)
      case x: wsdl11.XImportType => scalaxb.toXML[wsdl11.XImportType](x, __namespace, __elementLabel, __scope, true)
      case x: wsdl11.XTypesType => scalaxb.toXML[wsdl11.XTypesType](x, __namespace, __elementLabel, __scope, true)
      case x: wsdl11.XMessageType => scalaxb.toXML[wsdl11.XMessageType](x, __namespace, __elementLabel, __scope, true)
      case x: wsdl11.XPortTypeType => scalaxb.toXML[wsdl11.XPortTypeType](x, __namespace, __elementLabel, __scope, true)
      case x: wsdl11.XOperationType => scalaxb.toXML[wsdl11.XOperationType](x, __namespace, __elementLabel, __scope, true)
      case x: wsdl11.XParamType => scalaxb.toXML[wsdl11.XParamType](x, __namespace, __elementLabel, __scope, true)
      case x: wsdl11.XFaultType => scalaxb.toXML[wsdl11.XFaultType](x, __namespace, __elementLabel, __scope, true)
      case x: wsdl11.XStartWithExtensionsTypable => scalaxb.toXML[wsdl11.XStartWithExtensionsTypable](x, __namespace, __elementLabel, __scope, true)
      case x: wsdl11.XServiceType => scalaxb.toXML[wsdl11.XServiceType](x, __namespace, __elementLabel, __scope, true)
      case x: wsdl11.XPortType => scalaxb.toXML[wsdl11.XPortType](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  trait DefaultWsdl11XOpenAttsFormat extends scalaxb.XMLFormat[wsdl11.XOpenAtts] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, wsdl11.XOpenAtts] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://schemas.xmlsoap.org/wsdl/"), Some("partType")) => Right(scalaxb.fromXML[wsdl11.XPartType](node, stack))
          case x => Left("Unknown type: " + x)
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: wsdl11.XOpenAtts, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: wsdl11.XPartType => scalaxb.toXML[wsdl11.XPartType](x, __namespace, __elementLabel, __scope, true)
      case _ => sys.error("Unknown type: " + __obj)
    }
  }

  trait DefaultWsdl11XDefinitionsTypeFormat extends scalaxb.ElemNameParser[wsdl11.XDefinitionsType] {
    val targetNamespace: Option[String] = Some("http://schemas.xmlsoap.org/wsdl/")
    
    override def typeName: Option[String] = Some("definitionsType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdl11.XDefinitionsType] =
      phrase(opt(scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "documentation")) ~ 
      rep((((scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "import")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[wsdl11.XImportType](x, scalaxb.ElemName(node) :: stack)))) ||| 
      ((scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "types")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[wsdl11.XTypesType](x, scalaxb.ElemName(node) :: stack)))) ||| 
      ((scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "message")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[wsdl11.XMessageType](x, scalaxb.ElemName(node) :: stack)))) ||| 
      ((scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "portType")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[wsdl11.XPortTypeType](x, scalaxb.ElemName(node) :: stack)))) ||| 
      ((scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "binding")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[wsdl11.XBindingType](x, scalaxb.ElemName(node) :: stack)))) ||| 
      ((scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "service")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[wsdl11.XServiceType](x, scalaxb.ElemName(node) :: stack))))) | 
      ((any(_.namespace != Some("http://schemas.xmlsoap.org/wsdl/")) ^^ (scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack))))) ^^
      { case p1 ~ p2 =>
      wsdl11.XDefinitionsType(p1.headOption map { scalaxb.fromXML[wsdl11.XDocumentation](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq,
        (node \ "@targetNamespace").headOption map { scalaxb.fromXML[java.net.URI](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@name").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) }) })
    
    override def writesAttribute(__obj: wsdl11.XDefinitionsType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.targetNamespace foreach { x => attr = scala.xml.Attribute(null, "targetNamespace", x.toString, attr) }
      __obj.name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: wsdl11.XDefinitionsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.documentation map { scalaxb.toXML[wsdl11.XDocumentation](_, Some("http://schemas.xmlsoap.org/wsdl/"), Some("documentation"), __scope, false) } getOrElse {Nil},
        __obj.xdefinitionstypeoption flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false) })

  }

  trait DefaultWsdl11XImportTypeFormat extends scalaxb.ElemNameParser[wsdl11.XImportType] {
    val targetNamespace: Option[String] = Some("http://schemas.xmlsoap.org/wsdl/")
    
    override def typeName: Option[String] = Some("importType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdl11.XImportType] =
      phrase(opt(scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "documentation")) ^^
      { case p1 =>
      wsdl11.XImportType(p1.headOption map { scalaxb.fromXML[wsdl11.XDocumentation](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[java.net.URI]((node \ "@namespace"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[java.net.URI]((node \ "@location"), scalaxb.ElemName(node) :: stack)) })
    
    override def writesAttribute(__obj: wsdl11.XImportType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "namespace", __obj.namespace.toString, attr)
      attr = scala.xml.Attribute(null, "location", __obj.location.toString, attr)
      attr
    }

    def writesChildNodes(__obj: wsdl11.XImportType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.documentation map { scalaxb.toXML[wsdl11.XDocumentation](_, Some("http://schemas.xmlsoap.org/wsdl/"), Some("documentation"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultWsdl11XTypesTypeFormat extends scalaxb.ElemNameParser[wsdl11.XTypesType] {
    val targetNamespace: Option[String] = Some("http://schemas.xmlsoap.org/wsdl/")
    
    override def typeName: Option[String] = Some("typesType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdl11.XTypesType] =
      phrase(opt(scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "documentation")) ~ 
      rep(any(_.namespace != Some("http://schemas.xmlsoap.org/wsdl/"))) ^^
      { case p1 ~ p2 =>
      wsdl11.XTypesType(p1.headOption map { scalaxb.fromXML[wsdl11.XDocumentation](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: wsdl11.XTypesType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.documentation map { scalaxb.toXML[wsdl11.XDocumentation](_, Some("http://schemas.xmlsoap.org/wsdl/"), Some("documentation"), __scope, false) } getOrElse {Nil},
        __obj.any flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true) })

  }

  trait DefaultWsdl11XMessageTypeFormat extends scalaxb.ElemNameParser[wsdl11.XMessageType] {
    val targetNamespace: Option[String] = Some("http://schemas.xmlsoap.org/wsdl/")
    
    override def typeName: Option[String] = Some("messageType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdl11.XMessageType] =
      phrase(opt(scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "documentation")) ~ 
      rep(scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "part")) ^^
      { case p1 ~ p2 =>
      wsdl11.XMessageType(p1.headOption map { scalaxb.fromXML[wsdl11.XDocumentation](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[wsdl11.XPartType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@name"), scalaxb.ElemName(node) :: stack)) })
    
    override def writesAttribute(__obj: wsdl11.XMessageType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
      attr
    }

    def writesChildNodes(__obj: wsdl11.XMessageType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.documentation map { scalaxb.toXML[wsdl11.XDocumentation](_, Some("http://schemas.xmlsoap.org/wsdl/"), Some("documentation"), __scope, false) } getOrElse {Nil},
        __obj.part flatMap { scalaxb.toXML[wsdl11.XPartType](_, Some("http://schemas.xmlsoap.org/wsdl/"), Some("part"), __scope, false) })

  }

  trait DefaultWsdl11XPartTypeFormat extends scalaxb.ElemNameParser[wsdl11.XPartType] {
    val targetNamespace: Option[String] = Some("http://schemas.xmlsoap.org/wsdl/")
    
    override def typeName: Option[String] = Some("partType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdl11.XPartType] =
      phrase(opt(scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "documentation")) ^^
      { case p1 =>
      wsdl11.XPartType(p1.headOption map { scalaxb.fromXML[wsdl11.XDocumentation](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@name").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@type").headOption map { scalaxb.fromXML[javax.xml.namespace.QName](_, scalaxb.ElemName(node) :: stack)(scalaxb.XMLStandardTypes.qnameXMLFormat(node.scope)) },
        (node \ "@element").headOption map { scalaxb.fromXML[javax.xml.namespace.QName](_, scalaxb.ElemName(node) :: stack)(scalaxb.XMLStandardTypes.qnameXMLFormat(node.scope)) },
        scala.collection.immutable.ListMap((node match {
          case elem: scala.xml.Elem =>
            elem.attributes.toList flatMap {
              case scala.xml.UnprefixedAttribute(key, value, _) if key == "name" => Nil
              case scala.xml.UnprefixedAttribute(key, value, _) if key == "type" => Nil
              case scala.xml.UnprefixedAttribute(key, value, _) if key == "element" => Nil
              case scala.xml.UnprefixedAttribute(key, value, _) =>
                List(("@" + key, scalaxb.DataRecord(None, Some(key), value.text)))
              case scala.xml.PrefixedAttribute(pre, key, value, _) =>
                val ns = elem.scope.getURI(pre)
                List(("@{" + ns + "}" + key, scalaxb.DataRecord(Option[String](ns), Some(key), value.text)))
              case _ => Nil
            }
          case _ => Nil
        }): _*)) })
    
    override def writesAttribute(__obj: wsdl11.XPartType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
      __obj.typeValue foreach { x => attr = scala.xml.Attribute(null, "type", scalaxb.Helper.toString(x, __scope), attr) }
      __obj.element foreach { x => attr = scala.xml.Attribute(null, "element", scalaxb.Helper.toString(x, __scope), attr) }
      __obj.attributes.toList map {
        case (key, x) => attr = scala.xml.Attribute((x.namespace map { __scope.getPrefix(_) }).orNull, x.key.orNull, x.value.toString, attr) }
      attr
    }

    def writesChildNodes(__obj: wsdl11.XPartType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.documentation map { scalaxb.toXML[wsdl11.XDocumentation](_, Some("http://schemas.xmlsoap.org/wsdl/"), Some("documentation"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultWsdl11XPortTypeTypeFormat extends scalaxb.ElemNameParser[wsdl11.XPortTypeType] {
    val targetNamespace: Option[String] = Some("http://schemas.xmlsoap.org/wsdl/")
    
    override def typeName: Option[String] = Some("portTypeType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdl11.XPortTypeType] =
      phrase(opt(scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "documentation")) ~ 
      rep(scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "operation")) ^^
      { case p1 ~ p2 =>
      wsdl11.XPortTypeType(p1.headOption map { scalaxb.fromXML[wsdl11.XDocumentation](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[wsdl11.XOperationType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@name"), scalaxb.ElemName(node) :: stack)) })
    
    override def writesAttribute(__obj: wsdl11.XPortTypeType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
      attr
    }

    def writesChildNodes(__obj: wsdl11.XPortTypeType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.documentation map { scalaxb.toXML[wsdl11.XDocumentation](_, Some("http://schemas.xmlsoap.org/wsdl/"), Some("documentation"), __scope, false) } getOrElse {Nil},
        __obj.operation flatMap { scalaxb.toXML[wsdl11.XOperationType](_, Some("http://schemas.xmlsoap.org/wsdl/"), Some("operation"), __scope, false) })

  }

  trait DefaultWsdl11XOperationTypeFormat extends scalaxb.ElemNameParser[wsdl11.XOperationType] with Wsdl11XOnewayoperationGroupFormat with Wsdl11XRequestresponseoperationGroupFormat with Wsdl11XSolicitresponseoperationGroupFormat with Wsdl11XNotificationoperationGroupFormat {
    val targetNamespace: Option[String] = Some("http://schemas.xmlsoap.org/wsdl/")
    
    override def typeName: Option[String] = Some("operationType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdl11.XOperationType] =
      phrase(opt(scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "documentation")) ~ 
      ((parseXOnewayoperationGroup(node, scalaxb.ElemName(node) :: stack, true)) ||| 
      (parseXRequestresponseoperationGroup(node, scalaxb.ElemName(node) :: stack, true)) ||| 
      (parseXSolicitresponseoperationGroup(node, scalaxb.ElemName(node) :: stack, true)) ||| 
      (parseXNotificationoperationGroup(node, scalaxb.ElemName(node) :: stack, true))) ^^
      { case p1 ~ p2 =>
      wsdl11.XOperationType(p1.headOption map { scalaxb.fromXML[wsdl11.XDocumentation](_, scalaxb.ElemName(node) :: stack) },
        p2,
        scalaxb.fromXML[String]((node \ "@name"), scalaxb.ElemName(node) :: stack)) })
    
    override def writesAttribute(__obj: wsdl11.XOperationType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
      attr
    }

    def writesChildNodes(__obj: wsdl11.XOperationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.documentation map { scalaxb.toXML[wsdl11.XDocumentation](_, Some("http://schemas.xmlsoap.org/wsdl/"), Some("documentation"), __scope, false) } getOrElse {Nil},
        Some(__obj.xoperationtypeoption) map {x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, false)} get)

  }

  trait DefaultWsdl11XParamTypeFormat extends scalaxb.ElemNameParser[wsdl11.XParamType] {
    val targetNamespace: Option[String] = Some("http://schemas.xmlsoap.org/wsdl/")
    
    override def typeName: Option[String] = Some("paramType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdl11.XParamType] =
      phrase(opt(scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "documentation")) ^^
      { case p1 =>
      wsdl11.XParamType(p1.headOption map { scalaxb.fromXML[wsdl11.XDocumentation](_, scalaxb.ElemName(node) :: stack) },
        (node \ "@name").headOption map { scalaxb.fromXML[String](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[javax.xml.namespace.QName]((node \ "@message"), scalaxb.ElemName(node) :: stack)(scalaxb.XMLStandardTypes.qnameXMLFormat(node.scope))) })
    
    override def writesAttribute(__obj: wsdl11.XParamType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      __obj.name foreach { x => attr = scala.xml.Attribute(null, "name", x.toString, attr) }
      attr = scala.xml.Attribute(null, "message", scalaxb.Helper.toString(__obj.message, __scope), attr)
      attr
    }

    def writesChildNodes(__obj: wsdl11.XParamType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.documentation map { scalaxb.toXML[wsdl11.XDocumentation](_, Some("http://schemas.xmlsoap.org/wsdl/"), Some("documentation"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultWsdl11XFaultTypeFormat extends scalaxb.ElemNameParser[wsdl11.XFaultType] {
    val targetNamespace: Option[String] = Some("http://schemas.xmlsoap.org/wsdl/")
    
    override def typeName: Option[String] = Some("faultType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdl11.XFaultType] =
      phrase(opt(scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "documentation")) ^^
      { case p1 =>
      wsdl11.XFaultType(p1.headOption map { scalaxb.fromXML[wsdl11.XDocumentation](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@name"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.namespace.QName]((node \ "@message"), scalaxb.ElemName(node) :: stack)(scalaxb.XMLStandardTypes.qnameXMLFormat(node.scope))) })
    
    override def writesAttribute(__obj: wsdl11.XFaultType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
      attr = scala.xml.Attribute(null, "message", scalaxb.Helper.toString(__obj.message, __scope), attr)
      attr
    }

    def writesChildNodes(__obj: wsdl11.XFaultType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      (__obj.documentation map { scalaxb.toXML[wsdl11.XDocumentation](_, Some("http://schemas.xmlsoap.org/wsdl/"), Some("documentation"), __scope, false) } getOrElse {Nil})

  }

  trait DefaultWsdl11XStartWithExtensionsTypableFormat extends scalaxb.XMLFormat[wsdl11.XStartWithExtensionsTypable] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, wsdl11.XStartWithExtensionsTypable] = seq match {
      case node: scala.xml.Node =>     
        scalaxb.Helper.instanceType(node) match {
          case (Some("http://schemas.xmlsoap.org/wsdl/"), Some("bindingType")) => Right(scalaxb.fromXML[wsdl11.XBindingType](node, stack))
          case (Some("http://schemas.xmlsoap.org/wsdl/"), Some("binding_operationType")) => Right(scalaxb.fromXML[wsdl11.XBinding_operationType](node, stack))
          case _ => Right(scalaxb.fromXML[wsdl11.XStartWithExtensionsType](node, stack))
        }
      case _ => Left("reads failed: seq must be scala.xml.Node")  
    }
    
    def writes(__obj: wsdl11.XStartWithExtensionsTypable, __namespace: Option[String], __elementLabel: Option[String],
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq = __obj match {
      case x: wsdl11.XBindingType => scalaxb.toXML[wsdl11.XBindingType](x, __namespace, __elementLabel, __scope, true)
      case x: wsdl11.XBinding_operationType => scalaxb.toXML[wsdl11.XBinding_operationType](x, __namespace, __elementLabel, __scope, true)
      case x: wsdl11.XFault => scalaxb.toXML[wsdl11.XFault](x, __namespace, __elementLabel, __scope, true)
      case x: wsdl11.XStartWithExtensionsType => scalaxb.toXML[wsdl11.XStartWithExtensionsType](x, __namespace, __elementLabel, __scope, false)
    }
  }

  trait DefaultWsdl11XStartWithExtensionsTypeFormat extends scalaxb.ElemNameParser[wsdl11.XStartWithExtensionsType] {
    val targetNamespace: Option[String] = Some("http://schemas.xmlsoap.org/wsdl/")
    
    override def typeName: Option[String] = Some("startWithExtensionsType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdl11.XStartWithExtensionsType] =
      phrase(opt(scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "documentation")) ~ 
      rep(any(_.namespace != Some("http://schemas.xmlsoap.org/wsdl/"))) ^^
      { case p1 ~ p2 =>
      wsdl11.XStartWithExtensionsType(p1.headOption map { scalaxb.fromXML[wsdl11.XDocumentation](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack) }) })
    
    def writesChildNodes(__obj: wsdl11.XStartWithExtensionsType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.documentation map { scalaxb.toXML[wsdl11.XDocumentation](_, Some("http://schemas.xmlsoap.org/wsdl/"), Some("documentation"), __scope, false) } getOrElse {Nil},
        __obj.any flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true) })

  }

  trait DefaultWsdl11XBindingTypeFormat extends scalaxb.ElemNameParser[wsdl11.XBindingType] {
    val targetNamespace: Option[String] = Some("http://schemas.xmlsoap.org/wsdl/")
    
    override def typeName: Option[String] = Some("bindingType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdl11.XBindingType] =
      phrase(opt(scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "documentation")) ~ 
      rep(any(_.namespace != Some("http://schemas.xmlsoap.org/wsdl/"))) ~ 
      rep(scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "operation")) ^^
      { case p1 ~ p2 ~ p3 =>
      wsdl11.XBindingType(p1.headOption map { scalaxb.fromXML[wsdl11.XDocumentation](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack) },
        p3.toSeq map { scalaxb.fromXML[wsdl11.XBinding_operationType](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@name"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.namespace.QName]((node \ "@type"), scalaxb.ElemName(node) :: stack)(scalaxb.XMLStandardTypes.qnameXMLFormat(node.scope))) })
    
    override def writesAttribute(__obj: wsdl11.XBindingType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
      attr = scala.xml.Attribute(null, "type", scalaxb.Helper.toString(__obj.typeValue, __scope), attr)
      attr
    }

    def writesChildNodes(__obj: wsdl11.XBindingType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.documentation map { scalaxb.toXML[wsdl11.XDocumentation](_, Some("http://schemas.xmlsoap.org/wsdl/"), Some("documentation"), __scope, false) } getOrElse {Nil},
        __obj.any flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true) },
        __obj.operation flatMap { scalaxb.toXML[wsdl11.XBinding_operationType](_, Some("http://schemas.xmlsoap.org/wsdl/"), Some("operation"), __scope, false) })

  }

  trait DefaultWsdl11XFaultFormat extends scalaxb.ElemNameParser[wsdl11.XFault] {
    val targetNamespace: Option[String] = Some("http://schemas.xmlsoap.org/wsdl/")
    
    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdl11.XFault] =
      phrase(opt(scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "documentation")) ~ 
      rep(any(_.namespace != Some("http://schemas.xmlsoap.org/wsdl/"))) ^^
      { case p1 ~ p2 =>
      wsdl11.XFault(p1.headOption map { scalaxb.fromXML[wsdl11.XDocumentation](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@name"), scalaxb.ElemName(node) :: stack)) })
    
    override def writesAttribute(__obj: wsdl11.XFault, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
      attr
    }

    def writesChildNodes(__obj: wsdl11.XFault, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.documentation map { scalaxb.toXML[wsdl11.XDocumentation](_, Some("http://schemas.xmlsoap.org/wsdl/"), Some("documentation"), __scope, false) } getOrElse {Nil},
        __obj.any flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true) })

  }

  trait DefaultWsdl11XBinding_operationTypeFormat extends scalaxb.ElemNameParser[wsdl11.XBinding_operationType] {
    val targetNamespace: Option[String] = Some("http://schemas.xmlsoap.org/wsdl/")
    
    override def typeName: Option[String] = Some("binding_operationType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdl11.XBinding_operationType] =
      phrase(opt(scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "documentation")) ~ 
      rep(any(_.namespace != Some("http://schemas.xmlsoap.org/wsdl/"))) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "input")) ~ 
      opt(scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "output")) ~ 
      rep(scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "fault")) ^^
      { case p1 ~ p2 ~ p3 ~ p4 ~ p5 =>
      wsdl11.XBinding_operationType(p1.headOption map { scalaxb.fromXML[wsdl11.XDocumentation](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[wsdl11.XStartWithExtensionsTypable](_, scalaxb.ElemName(node) :: stack) },
        p4.headOption map { scalaxb.fromXML[wsdl11.XStartWithExtensionsTypable](_, scalaxb.ElemName(node) :: stack) },
        p5.toSeq map { scalaxb.fromXML[wsdl11.XFault](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@name"), scalaxb.ElemName(node) :: stack)) })
    
    override def writesAttribute(__obj: wsdl11.XBinding_operationType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
      attr
    }

    def writesChildNodes(__obj: wsdl11.XBinding_operationType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.documentation map { scalaxb.toXML[wsdl11.XDocumentation](_, Some("http://schemas.xmlsoap.org/wsdl/"), Some("documentation"), __scope, false) } getOrElse {Nil},
        __obj.any flatMap { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true) },
        __obj.input map { scalaxb.toXML[wsdl11.XStartWithExtensionsTypable](_, Some("http://schemas.xmlsoap.org/wsdl/"), Some("input"), __scope, false) } getOrElse {Nil},
        __obj.output map { scalaxb.toXML[wsdl11.XStartWithExtensionsTypable](_, Some("http://schemas.xmlsoap.org/wsdl/"), Some("output"), __scope, false) } getOrElse {Nil},
        __obj.fault flatMap { scalaxb.toXML[wsdl11.XFault](_, Some("http://schemas.xmlsoap.org/wsdl/"), Some("fault"), __scope, false) })

  }

  trait DefaultWsdl11XServiceTypeFormat extends scalaxb.ElemNameParser[wsdl11.XServiceType] {
    val targetNamespace: Option[String] = Some("http://schemas.xmlsoap.org/wsdl/")
    
    override def typeName: Option[String] = Some("serviceType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdl11.XServiceType] =
      phrase(opt(scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "documentation")) ~ 
      rep(scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "port")) ~ 
      opt(any(_.namespace != Some("http://schemas.xmlsoap.org/wsdl/"))) ^^
      { case p1 ~ p2 ~ p3 =>
      wsdl11.XServiceType(p1.headOption map { scalaxb.fromXML[wsdl11.XDocumentation](_, scalaxb.ElemName(node) :: stack) },
        p2.toSeq map { scalaxb.fromXML[wsdl11.XPortType](_, scalaxb.ElemName(node) :: stack) },
        p3.headOption map { scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@name"), scalaxb.ElemName(node) :: stack)) })
    
    override def writesAttribute(__obj: wsdl11.XServiceType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
      attr
    }

    def writesChildNodes(__obj: wsdl11.XServiceType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.documentation map { scalaxb.toXML[wsdl11.XDocumentation](_, Some("http://schemas.xmlsoap.org/wsdl/"), Some("documentation"), __scope, false) } getOrElse {Nil},
        __obj.port flatMap { scalaxb.toXML[wsdl11.XPortType](_, Some("http://schemas.xmlsoap.org/wsdl/"), Some("port"), __scope, false) },
        __obj.any map { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true) } getOrElse {Nil})

  }

  trait DefaultWsdl11XPortTypeFormat extends scalaxb.ElemNameParser[wsdl11.XPortType] {
    val targetNamespace: Option[String] = Some("http://schemas.xmlsoap.org/wsdl/")
    
    override def typeName: Option[String] = Some("portType")

    def parser(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdl11.XPortType] =
      phrase(opt(scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "documentation")) ~ 
      opt(any(_.namespace != Some("http://schemas.xmlsoap.org/wsdl/"))) ^^
      { case p1 ~ p2 =>
      wsdl11.XPortType(p1.headOption map { scalaxb.fromXML[wsdl11.XDocumentation](_, scalaxb.ElemName(node) :: stack) },
        p2.headOption map { scalaxb.fromXML[scalaxb.DataRecord[Any]](_, scalaxb.ElemName(node) :: stack) },
        scalaxb.fromXML[String]((node \ "@name"), scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[javax.xml.namespace.QName]((node \ "@binding"), scalaxb.ElemName(node) :: stack)(scalaxb.XMLStandardTypes.qnameXMLFormat(node.scope))) })
    
    override def writesAttribute(__obj: wsdl11.XPortType, __scope: scala.xml.NamespaceBinding): scala.xml.MetaData = {
      var attr: scala.xml.MetaData  = scala.xml.Null
      attr = scala.xml.Attribute(null, "name", __obj.name.toString, attr)
      attr = scala.xml.Attribute(null, "binding", scalaxb.Helper.toString(__obj.binding, __scope), attr)
      attr
    }

    def writesChildNodes(__obj: wsdl11.XPortType, __scope: scala.xml.NamespaceBinding): Seq[scala.xml.Node] =
      Seq.concat(__obj.documentation map { scalaxb.toXML[wsdl11.XDocumentation](_, Some("http://schemas.xmlsoap.org/wsdl/"), Some("documentation"), __scope, false) } getOrElse {Nil},
        __obj.any map { x => scalaxb.toXML[scalaxb.DataRecord[Any]](x, x.namespace, x.key, __scope, true) } getOrElse {Nil})

  }


  trait Wsdl11XNotificationoperationGroupFormat extends scalaxb.AnyElemNameParser {
    def parseXNotificationoperationGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdl11.XNotificationoperationSequence] =
      (((scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "output"))) ^^ 
        { case p1 => wsdl11.XNotificationoperationSequence(scalaxb.fromXML[wsdl11.XParamType](p1, scalaxb.ElemName(node) :: stack)) })
  
    def parseXNotificationoperationGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName], wrap: Boolean): Parser[scalaxb.DataRecord[Any]] =
      (((scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "output"))) ^^ 
        { case p1 => scalaxb.DataRecord(wsdl11.XNotificationoperationSequence(scalaxb.fromXML[wsdl11.XParamType](p1, scalaxb.ElemName(node) :: stack))) })
    
    def parsemixedXNotificationoperationGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Seq[scalaxb.DataRecord[Any]]] =
      ((((scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "output")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[wsdl11.XParamType](x, scalaxb.ElemName(node) :: stack)))) ~ 
      optTextRecord) ^^ 
        { case p1 ~ p2 => Seq.concat(Seq(p1),
        p2.toList) })
  }

  trait DefaultWsdl11XNotificationoperationSequenceFormat extends scalaxb.XMLFormat[wsdl11.XNotificationoperationSequence] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, wsdl11.XNotificationoperationSequence] = Left("don't call me.")
    
    def writes(__obj: wsdl11.XNotificationoperationSequence, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scalaxb.toXML[wsdl11.XParamType](__obj.output, Some("http://schemas.xmlsoap.org/wsdl/"), Some("output"), __scope, false)


  }


  trait Wsdl11XSolicitresponseoperationGroupFormat extends scalaxb.AnyElemNameParser {
    def parseXSolicitresponseoperationGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdl11.XSolicitresponseoperationSequence] =
      (((scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "output")) ~ 
      (scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "input")) ~ 
      rep(scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "fault"))) ^^ 
        { case p1 ~ p2 ~ p3 => wsdl11.XSolicitresponseoperationSequence(scalaxb.fromXML[wsdl11.XParamType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[wsdl11.XParamType](p2, scalaxb.ElemName(node) :: stack),
        p3.toSeq map { scalaxb.fromXML[wsdl11.XFaultType](_, scalaxb.ElemName(node) :: stack) }) })
  
    def parseXSolicitresponseoperationGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName], wrap: Boolean): Parser[scalaxb.DataRecord[Any]] =
      (((scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "output")) ~ 
      (scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "input")) ~ 
      rep(scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "fault"))) ^^ 
        { case p1 ~ p2 ~ p3 => scalaxb.DataRecord(wsdl11.XSolicitresponseoperationSequence(scalaxb.fromXML[wsdl11.XParamType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[wsdl11.XParamType](p2, scalaxb.ElemName(node) :: stack),
        p3.toSeq map { scalaxb.fromXML[wsdl11.XFaultType](_, scalaxb.ElemName(node) :: stack) })) })
    
    def parsemixedXSolicitresponseoperationGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Seq[scalaxb.DataRecord[Any]]] =
      ((((scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "output")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[wsdl11.XParamType](x, scalaxb.ElemName(node) :: stack)))) ~ 
      optTextRecord ~ 
      ((scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "input")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[wsdl11.XParamType](x, scalaxb.ElemName(node) :: stack)))) ~ 
      optTextRecord ~ 
      (rep(scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "fault")) ^^ 
      (_.toSeq map { x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[wsdl11.XFaultType](x, scalaxb.ElemName(node) :: stack)) })) ~ 
      optTextRecord) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 => Seq.concat(Seq(p1),
        p2.toList,
        Seq(p3),
        p4.toList,
        p5,
        p6.toList) })
  }

  trait DefaultWsdl11XSolicitresponseoperationSequenceFormat extends scalaxb.XMLFormat[wsdl11.XSolicitresponseoperationSequence] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, wsdl11.XSolicitresponseoperationSequence] = Left("don't call me.")
    
    def writes(__obj: wsdl11.XSolicitresponseoperationSequence, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(scalaxb.toXML[wsdl11.XParamType](__obj.output, Some("http://schemas.xmlsoap.org/wsdl/"), Some("output"), __scope, false),
        scalaxb.toXML[wsdl11.XParamType](__obj.input, Some("http://schemas.xmlsoap.org/wsdl/"), Some("input"), __scope, false),
        __obj.fault flatMap { scalaxb.toXML[wsdl11.XFaultType](_, Some("http://schemas.xmlsoap.org/wsdl/"), Some("fault"), __scope, false) })


  }


  trait Wsdl11XRequestresponseoperationGroupFormat extends scalaxb.AnyElemNameParser {
    def parseXRequestresponseoperationGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdl11.XRequestresponseoperationSequence] =
      (((scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "input")) ~ 
      (scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "output")) ~ 
      rep(scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "fault"))) ^^ 
        { case p1 ~ p2 ~ p3 => wsdl11.XRequestresponseoperationSequence(scalaxb.fromXML[wsdl11.XParamType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[wsdl11.XParamType](p2, scalaxb.ElemName(node) :: stack),
        p3.toSeq map { scalaxb.fromXML[wsdl11.XFaultType](_, scalaxb.ElemName(node) :: stack) }) })
  
    def parseXRequestresponseoperationGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName], wrap: Boolean): Parser[scalaxb.DataRecord[Any]] =
      (((scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "input")) ~ 
      (scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "output")) ~ 
      rep(scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "fault"))) ^^ 
        { case p1 ~ p2 ~ p3 => scalaxb.DataRecord(wsdl11.XRequestresponseoperationSequence(scalaxb.fromXML[wsdl11.XParamType](p1, scalaxb.ElemName(node) :: stack),
        scalaxb.fromXML[wsdl11.XParamType](p2, scalaxb.ElemName(node) :: stack),
        p3.toSeq map { scalaxb.fromXML[wsdl11.XFaultType](_, scalaxb.ElemName(node) :: stack) })) })
    
    def parsemixedXRequestresponseoperationGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Seq[scalaxb.DataRecord[Any]]] =
      ((((scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "input")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[wsdl11.XParamType](x, scalaxb.ElemName(node) :: stack)))) ~ 
      optTextRecord ~ 
      ((scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "output")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[wsdl11.XParamType](x, scalaxb.ElemName(node) :: stack)))) ~ 
      optTextRecord ~ 
      (rep(scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "fault")) ^^ 
      (_.toSeq map { x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[wsdl11.XFaultType](x, scalaxb.ElemName(node) :: stack)) })) ~ 
      optTextRecord) ^^ 
        { case p1 ~ p2 ~ p3 ~ p4 ~ p5 ~ p6 => Seq.concat(Seq(p1),
        p2.toList,
        Seq(p3),
        p4.toList,
        p5,
        p6.toList) })
  }

  trait DefaultWsdl11XRequestresponseoperationSequenceFormat extends scalaxb.XMLFormat[wsdl11.XRequestresponseoperationSequence] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, wsdl11.XRequestresponseoperationSequence] = Left("don't call me.")
    
    def writes(__obj: wsdl11.XRequestresponseoperationSequence, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      Seq.concat(scalaxb.toXML[wsdl11.XParamType](__obj.input, Some("http://schemas.xmlsoap.org/wsdl/"), Some("input"), __scope, false),
        scalaxb.toXML[wsdl11.XParamType](__obj.output, Some("http://schemas.xmlsoap.org/wsdl/"), Some("output"), __scope, false),
        __obj.fault flatMap { scalaxb.toXML[wsdl11.XFaultType](_, Some("http://schemas.xmlsoap.org/wsdl/"), Some("fault"), __scope, false) })


  }


  trait Wsdl11XOnewayoperationGroupFormat extends scalaxb.AnyElemNameParser {
    def parseXOnewayoperationGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[wsdl11.XOnewayoperationSequence] =
      (((scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "input"))) ^^ 
        { case p1 => wsdl11.XOnewayoperationSequence(scalaxb.fromXML[wsdl11.XParamType](p1, scalaxb.ElemName(node) :: stack)) })
  
    def parseXOnewayoperationGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName], wrap: Boolean): Parser[scalaxb.DataRecord[Any]] =
      (((scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "input"))) ^^ 
        { case p1 => scalaxb.DataRecord(wsdl11.XOnewayoperationSequence(scalaxb.fromXML[wsdl11.XParamType](p1, scalaxb.ElemName(node) :: stack))) })
    
    def parsemixedXOnewayoperationGroup(node: scala.xml.Node, stack: List[scalaxb.ElemName]): Parser[Seq[scalaxb.DataRecord[Any]]] =
      ((((scalaxb.ElemName(Some("http://schemas.xmlsoap.org/wsdl/"), "input")) ^^ 
      (x => scalaxb.DataRecord(x.namespace, Some(x.name), scalaxb.fromXML[wsdl11.XParamType](x, scalaxb.ElemName(node) :: stack)))) ~ 
      optTextRecord) ^^ 
        { case p1 ~ p2 => Seq.concat(Seq(p1),
        p2.toList) })
  }

  trait DefaultWsdl11XOnewayoperationSequenceFormat extends scalaxb.XMLFormat[wsdl11.XOnewayoperationSequence] {
    def reads(seq: scala.xml.NodeSeq, stack: List[scalaxb.ElemName]): Either[String, wsdl11.XOnewayoperationSequence] = Left("don't call me.")
    
    def writes(__obj: wsdl11.XOnewayoperationSequence, __namespace: Option[String], __elementLabel: Option[String], 
        __scope: scala.xml.NamespaceBinding, __typeAttribute: Boolean): scala.xml.NodeSeq =
      scalaxb.toXML[wsdl11.XParamType](__obj.input, Some("http://schemas.xmlsoap.org/wsdl/"), Some("input"), __scope, false)


  }


}

